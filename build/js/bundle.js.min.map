{"version":3,"sources":["app.js","dragNdrop.js","loadingAnimation.js","monthInput.js","resetFileInput.js","selectAnimation.js"],"names":["startApp","resetFileInput","dragNdrop","dropArea","document","querySelector","isOver","addEventListener","e","preventDefault","highlight","this","setTimeout","unhighlight","handleDrop","body","files","dataTransfer","validateFile","click","console","log","classList","add","remove","file","type","async","loadingAnimation","createLoading","retrieveDataTable","deleteLoading","loadingContainer","createElement","loading","animation","i","div","appendChild","form","FormData","url","result","fetch","method","data","json","rfc","monthInput","selectInput","contains","month","target","getAttribute","updateMonth","checked","textContent","inputContainer","inputSubmit","fileInput","name","accept","id","selectAnimation","inputId"],"mappings":"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","file":"bundle.js","sourcesContent":["document.addEventListener('DOMContentLoaded', () => {\r\n    startApp();\r\n})\r\n\r\nfunction startApp() {\r\n    // selectAnimation();\r\n    resetFileInput();\r\n    dragNdrop();\r\n    // monthInput();\r\n}","function dragNdrop() {\r\n    const dropArea = document.querySelector('.upload-section');\r\n    let isOver = false;\r\n    \r\n    dropArea.addEventListener('dragover', function(e) {\r\n        // Stopping default prevents opening a new browser tab for showing the file that has been dropped\r\n        e.preventDefault();\r\n        isOver = true;\r\n        highlight(this);\r\n    });\r\n\r\n    dropArea.addEventListener('dragleave', function(e) {\r\n        isOver = false;\r\n        /* Waits 10ms for checking whether the mouse is over the dropArea or not\r\n        Because if you move into a child of the 'upload-container' DIV it will\r\n        count as if you have left the dropArea and eventually it will \r\n        produce a 'dragleave' event even though you are still moving inside the\r\n        dropArea. So that's why it waits 10ms because if the mouse is still moving\r\n        inside the dropArea, it will create a 'dragover' 7ms or less after the dragleave\r\n        event was fired. And that's how we know whether the mouse has left the dropArea \r\n        or not */\r\n        setTimeout(() => {\r\n            if(!isOver) {\r\n                unhighlight(this);\r\n            }\r\n        }, 10);\r\n    });\r\n\r\n    dropArea.addEventListener('drop', function(e) {\r\n        /* Stopping default prevents opening a new browser tab for showing the file that has been dropped\r\n        Both are necessary, for 'drop' and 'dragover' events */\r\n        e.preventDefault();\r\n        unhighlight(this);\r\n        handleDrop(e);\r\n    });\r\n\r\n    document.body.addEventListener('dragover', function(e) {\r\n        e.preventDefault();\r\n    })\r\n\r\n    document.body.addEventListener('drop', function(e) {\r\n        e.preventDefault();\r\n    })\r\n}\r\n\r\nfunction handleDrop(e) {\r\n    // Takes the file that has been dropped\r\n    const dt = e.dataTransfer;\r\n    const files = dt.files;\r\n\r\n    if(validateFile(files[0])) {\r\n        // Decode the QR code and retrieve the Date from the PDF Tax Receipt\r\n        const inputFile = document.querySelector('input[type=file]');\r\n        inputFile.files = files;\r\n    \r\n        const inputSubmit = document.querySelector('input[type=submit]');\r\n        inputSubmit.click();\r\n    }else {\r\n        // Alert the user the file is not in PDF format\r\n        console.log(\"Your file must be PDF format\");\r\n    }\r\n}\r\n\r\nfunction highlight(dropArea) {\r\n    dropArea.classList.add('highlight');\r\n}\r\n\r\nfunction unhighlight(dropArea) {\r\n    dropArea.classList.remove('highlight');\r\n}\r\n\r\nfunction validateFile(file) {\r\n    if(file.type === 'application/pdf')  {\r\n        return true;       \r\n    } else {\r\n        return false;\r\n    }\r\n}","async function loadingAnimation(file) {\r\n    createLoading();\r\n    await retrieveDataTable(file);\r\n    deleteLoading();\r\n}\r\n\r\nfunction deleteLoading() {\r\n    const loadingContainer = document.querySelector('.loading-container');\r\n    loadingContainer.remove();\r\n}\r\n\r\nfunction createLoading() {\r\n    const loadingContainer = document.createElement('DIV');\r\n    loadingContainer.classList.add('loading-container');\r\n\r\n    const loading = document.createElement('DIV');\r\n    loading.classList.add('loading');\r\n\r\n    const animation = document.createElement('DIV');\r\n    animation.classList.add('lds-ring');\r\n\r\n    for(let i = 0; i < 4; i++) {\r\n        const div = document.createElement('DIV');\r\n        animation.appendChild(div);\r\n    }\r\n\r\n    loading.appendChild(animation);\r\n    loadingContainer.appendChild(loading);\r\n\r\n    document.body.appendChild(loadingContainer);\r\n}\r\n\r\nasync function retrieveDataTable(file) {\r\n    const form = new FormData(document.querySelector(\".form\"));\r\n    try {\r\n        const url = 'http://localhost/SocialService/QR-project/includes/monthsPerson.php';\r\n        const result = await fetch(url, {\r\n            method: \"post\",\r\n            body: form\r\n        });\r\n\r\n        const data = await result.json();\r\n        const {rfc} = data;\r\n        // console.log(rfc);\r\n        console.log(data);\r\n        // return rfc;\r\n    }catch(e) {\r\n        console.log(e);\r\n    }\r\n}","function monthInput() {\r\n    const selectInput = document.querySelector('.select-input');\r\n    selectInput.addEventListener('click', function(e) {\r\n        if(!this.classList.contains('selected')) {\r\n            this.classList.add('selected');\r\n        }else {\r\n            this.classList.remove('selected');\r\n        }\r\n    })\r\n\r\n    const monthContainer = document.querySelector('.month-container');\r\n    monthContainer.addEventListener('click', function(e) {\r\n        e.preventDefault();\r\n        const month = e.target.getAttribute('for');\r\n        updateMonth(month);\r\n        const inputRadio = document.querySelector(`#${month}`);\r\n        inputRadio.checked = true;\r\n        selectInput.classList.remove('selected'); \r\n    })\r\n}\r\n\r\nfunction updateMonth(month) {\r\n    const selectInput = document.querySelector('.select-input');\r\n    selectInput.textContent = month;\r\n}","function resetFileInput() {\r\n    const inputContainer = document.querySelector('.upload-input-container');\r\n\r\n    const inputSubmit = document.querySelector('input[type=submit]');\r\n\r\n    const fileInput = document.createElement('INPUT');\r\n    fileInput.type = \"file\";\r\n    fileInput.name = \"fileToUpload\";\r\n    fileInput.accept = \".pdf\";\r\n    fileInput.id = \"fileToUpload\";\r\n    fileInput.addEventListener('change', function() {\r\n        // this.form.submit();\r\n        if(validateFile(this.files[0])) {\r\n            inputSubmit.click();\r\n        } else {\r\n            // Alert the user the file is not in PDF format\r\n            console.log(\"Your file must be PDF format\");\r\n        }\r\n    })\r\n\r\n    inputContainer.appendChild(fileInput);\r\n}\r\n","function selectAnimation() {\r\n    const selectContainer = document.querySelector('.select-container');\r\n    selectContainer.addEventListener('click', function(e) {\r\n        e.preventDefault();\r\n        if(e.target !== this) {\r\n            const inputId = `#${e.target.getAttribute('for')}`;\r\n            const input = document.querySelector(inputId);\r\n            input.checked = true;\r\n        }\r\n        if(this.classList.contains('selected')) this.classList.remove('selected');\r\n        else this.classList.add('selected');\r\n    })\r\n}"]}